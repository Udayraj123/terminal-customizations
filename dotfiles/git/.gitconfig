# This is Git's per-user configuration file.
[user]
name = <your-git-handle-work>
email = <your-git-email>

# [credential]
#	username = <your-git-handle-work>
#	helper = store

# Tip: use this command to auto setup push remote for new branch: git config --global push.autoSetupRemote true
[push]
default = current
	autoSetupRemote = true

[hub]
protocol = https
[core]
editor = nano

[alias]
add-commit = "!git add -A && git commit -m "
adog = log --all --decorate --oneline --graph
# create if not exist, set push -
checkoutb = "!_f() { git checkout $1 2>/dev/null || (git checkout -b $1 && git push -u); }; _f"
stashl = stash list
co = checkout
ci = commit
st = status
br = branch
hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
type = cat-file -t
dump = cat-file -p
pr = !bash ~/bin/git-pr.sh
user = "!echo \"Setting username: $1\" && git config --global credential.username "
unadd = restore --staged
shallow = clone --depth 1
# https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
recent = "!git for-each-ref --color=always --sort=-committerdate refs/heads refs/remotes --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:magenta)%(authorname)%(color:reset)|%(color:bold green)%(committerdate:relative)|%(color:red)%(objectname:short)%(color:reset)'|column -ts'|'"
# recent = "!git for-each-ref --color=always --sort=-committerdate refs/heads refs/remotes --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:red)%(objectname:short)%(color:reset)|%(color:bold green)%(committerdate:relative)|%(color:magenta)%(authorname)%(color:reset)|%(color:blue)%(subject)'|column -ts'|'"

alias = config --get-regexp alias
setremote = "!_f() { git branch -u \"$1/$(git rev-parse --abbrev-ref HEAD)\"; }; _f"

[pull]
rebase = false

[credential]
	username = <your-git-handle-work>

[url "git@github.com:"]
	insteadOf = https://github.com/

# If git directory is inside personal workspace, load personal .gitconfig below.
# Note: includeIf shall preferrably be kept at the bottom to avoid overrides.
[includeIf "gitdir:~/Personals/"]
path = ~/Personals/.gitconfig
